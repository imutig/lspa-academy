/**
 * Export simple des donn√©es SQLite
 */

import { execSync } from 'child_process'
import fs from 'fs'
import path from 'path'

async function exportSQLiteData() {
  console.log('üíæ Export des donn√©es SQLite...')
  
  try {
    // V√©rifier si le fichier SQLite existe
    const dbPath = path.join(process.cwd(), 'prisma', 'dev.db')
    
    if (!fs.existsSync(dbPath)) {
      console.log('‚ùå Fichier SQLite introuvable:', dbPath)
      console.log('‚ÑπÔ∏è  Pas de donn√©es √† migrer')
      return
    }

    // Utiliser sqlite3 pour exporter
    console.log('üìä Export des tables...')
    
    // Export de chaque table
    const tables = ['User', 'Session', 'Quiz', 'Question', 'Interview', 'InterviewQuestion', 'InterviewSituation']
    const exportData: any = {}

    for (const table of tables) {
      try {
        const result = execSync(`sqlite3 "${dbPath}" "SELECT * FROM ${table};"`, { 
          encoding: 'utf8',
          timeout: 10000 
        })
        
        if (result.trim()) {
          exportData[table] = result.trim().split('\n')
          console.log(`‚úÖ Table ${table}: ${exportData[table].length} enregistrements`)
        } else {
          console.log(`‚ÑπÔ∏è  Table ${table}: vide`)
          exportData[table] = []
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è  Table ${table}: erreur ou inexistante`)
        exportData[table] = []
      }
    }

    // Sauvegarder dans un fichier JSON
    const backupPath = path.join(process.cwd(), `backup-sqlite-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`)
    fs.writeFileSync(backupPath, JSON.stringify(exportData, null, 2))
    
    console.log('‚úÖ Backup SQLite sauvegard√©:', backupPath)
    console.log('üìù Vous pouvez maintenant continuer avec PostgreSQL')

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'export:', error)
    console.log('‚ÑπÔ∏è  Continuez avec PostgreSQL (pas de donn√©es √† migrer)')
  }
}

exportSQLiteData()
